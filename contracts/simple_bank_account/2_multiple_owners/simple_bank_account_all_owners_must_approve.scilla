(******************************************************************************)
(*               Scilla version - to ensure fixed behaviour.                  *)
(******************************************************************************)
scilla_version 0

(******************************************************************************)
(*               Import functions from the standard library.                  *)
(******************************************************************************)
(* BoolUtils needed for orb (boolean OR) *)
import BoolUtils

(******************************************************************************)
(*              Library code - pure, i.e., no state changes                   *)
(******************************************************************************)
library SimpleBankAccount

(* Utility function - wrap a single message into a singleton list *)
let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let mk_withdrawal_request_submitted_event =
  fun (withdrawalId : Uint32) =>
    { _eventname : "WithdrawalRequestSubmitted"; withdrawalId : withdrawalId }

(* Error types *)
type Error =
| InsufficientBalance
| NonOwnerCannotWithdraw
| CannotAddOwner
| NonOwnerCannotApprove


(* Dummy type to model sets with maps *)
type Unit =
| Unit


(* Using the Error type ensures that mk_error_event can only *)
(* create events with meaningful error codes. *)
let mk_error_event =
  fun (error : Error) =>
    let error_code =
      match error with
      | InsufficientBalance => Uint32 1
      | NonOwnerCannotWithdraw => Uint32 2
      | CannotAddOwner => Uint32 3
      | NonOwnerCannotApprove => Uint32 4
      end
    in
    { _eventname : "Error"; error_code : error_code}

(* All values must be named. *)
(* It is therefore helpful to define the constants needed in the contract. *)
let const_true = True
let const_false = False
(* A name for the dummy value to model sets with maps *)
let const_dummy = Unit

(* Check that sender is either the initial owner or an additional owner. *)
let sender_is_owner =
  fun (sender : ByStr20) =>
  fun (initial_owner : ByStr20) =>
  fun (additional_owner_opt : Option Unit) =>
    let sender_is_initial_owner = builtin eq sender initial_owner
    in
    let sender_is_additional_owner =
      match additional_owner_opt with
      | None =>
        const_false
      | Some _ =>
        const_true
      end
    in
    orb sender_is_initial_owner sender_is_additional_owner

(* Type of pending withdrawals. *)
type PendingWithdrawal =
(* A withdrawal consists of a recipient and an amount. *)
| Withdrawal of ByStr20 Uint128


(******************************************************************************)
(*                        Contract definition                                 *)
(******************************************************************************)
(* initial_owner is the address of the first bank account holder. *)
(* Only owners are allowed to withdraw. *)
(* Only the initial owner is allowed to add new owners. *)
contract SimpleBankAccount(initial_owner : ByStr20)

(******************************************************************************)
(*                          Contract state                                    *)
(******************************************************************************)

(* field _balance : Uint128    implicitly declared *)

(* The set of owners added in addition to the initial one. *)
(* Treating a map from addresses to unit as equivalent to a set of addresses. *)
(* additional_owners is a field, so it is mutable. *)
field additional_owners : Map ByStr20 Unit
(* Initialise to an empty map *)
  = Emp ByStr20 Unit

(* Keep track of the number of withdrawals created. *)
field withdrawal_count : Uint32 = Uint32 0

(* Map from withdrawalId to information about the withdrawal. *)
field pending_withdrawals : Map Uint32 PendingWithdrawal
  = Emp Uint32 PendingWithdrawal

(* The set of approving owners for each withdrawalId. *)
field approvals : Map Uint32 (Map ByStr20 Unit)
  = Emp Uint32 (Map ByStr20 Unit)


(******************************************************************************)
(*        Transitions - impure, i.e., state changes and input/output          *)
(******************************************************************************)

(* Add a new owner. Only the initial owner is allowed to add new owners. *)
transition AddOwner(new_owner : ByStr20)
  sender_is_initial_owner = builtin eq _sender initial_owner;
  match sender_is_initial_owner with
  | False =>
    (* Non-owner attempts to add new owner. Deny. *)
    error = CannotAddOwner;
    e = mk_error_event error;
    event e
  | True =>
    (* Update additional_owners.*)
    additional_owners[new_owner] := const_dummy
  end
end

(* Deposit: Deposit money into the account *)
transition Deposit()
  (* Incoming message contains _amount field. *)
  (* Accept incoming amount *)
  accept
  (* _balance has now increased accordingly *)
end

(* Ask for money to be paid out. *)
transition SubmitWithdrawal(recipient : ByStr20, amount : Uint128)
  (* Create pending withdrawal *)
  withdrawal = Withdrawal recipient amount;
  (* Assign withdrawalId = number of previous withdrawals. *)
  withdrawal_id <- withdrawal_count;
  (* Increment the number of withdrawals *)
  count <- withdrawal_count;
  one = Uint32 1;
  new_count = builtin add count one;
  withdrawal_count := new_count;
  (* Add new withdrawal to pending_withdrawals. *)
  pending_withdrawals[withdrawal_id] := withdrawal;
  (* Issue event with the withdrawalId *)
  e = mk_withdrawal_request_submitted_event withdrawal_id;
  event e
end

(* Approve a pending withdrawal. *)
transition ApproveWithdrawal(withdrawalId : Uint32)

  (* Exercise 1: *)
  (* Only owners can approve withdrawals. *)
  (* Keep track of which owners have approved each withdrawal. *)
  (* Hint: use the approvals field defined above *)
  
end

(* Withdraw: Execute a pending withdrawal provided it has been approved *)
(* by all owners, and provided the balance is sufficient. *)
(* If not, issue an appropriate error event. *)
transition Withdraw(withdrawalId : Uint32)

  (* Exercise 2: *)
  (* Execute the withdrawal if all owners have approved. *)

end

  (* Additional exercises *)

  (* Exercise 3: *)
  (* What happens if some malicious user keeps submitting new withdrawals that will never be approved? *)
  (* Can this be avoided? *)

  (* Exercise 4 (challenging): *)
  (* What happens if a new owner is added while there are pending approvals? *)
  (* Can this be remedied? *)

  (* Exercise 5: *)
  (* What happens if an owner turns out to be malicious - can he be removed? *)
  (* Who should be allowed to remove him? *)

  (* Exercise 6: *)
  (* Execute the withdrawal if a certain, predefined number of owners have approved. *)
  (* How should this predefined number be supplied? *)
  (* What happens if the number of owners changes? *)
